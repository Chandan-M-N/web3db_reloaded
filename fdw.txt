Setup postgres connection b/w the hosts

Certainly! Here is a detailed step-by-step guide to connect two PostgreSQL hosts using Foreign Data Wrapper (FDW):

### Scenario
You have two PostgreSQL hosts, **Host 1** and **Host 2**, and you want **Host 1** to query data from **Host 2** using FDW.

### Steps to Connect Two Hosts Using FDW

#### Step 1: Install `postgres_fdw` Extension on Host 1
1. Connect to **Host 1** using `psql` or your preferred SQL client.
2. Run the following command to install the `postgres_fdw` extension:
   ```sql
   CREATE EXTENSION IF NOT EXISTS postgres_fdw;
   ```

#### Step 2: Create a Foreign Server on Host 1
1. Create a foreign server on **Host 1** that points to **Host 2**:
   ```sql
   CREATE SERVER foreign_server
   FOREIGN DATA WRAPPER postgres_fdw
   OPTIONS (host 'host2_ip_address', dbname 'host2_db_name', port '5432');
   ```
   - Replace `host2_ip_address` with the IP address of **Host 2**.
   - Replace `host2_db_name` with the database name on **Host 2**.

#### Step 3: Create a User Mapping on Host 1
1. Create a user mapping on **Host 1** to specify the credentials used to connect to **Host 2**:
   ```sql
   CREATE USER MAPPING FOR current_user
   SERVER foreign_server
   OPTIONS (user 'remote_user', password 'remote_password');
   ```
   - Replace `current_user` with the user you are logged in as on **Host 1**.
   - Replace `remote_user` and `remote_password` with the credentials for **Host 2**.

#### Step 4: Create a Foreign Table on Host 1
1. Create a foreign table on **Host 1** that maps to the table on **Host 2**:
   ```sql
   CREATE FOREIGN TABLE foreign_cid_table (
       cid VARCHAR,
       table_name VARCHAR
   )
   SERVER foreign_server
   OPTIONS (table_name 'cid_table');
   ```
   - Replace `cid_table` with the name of the table on **Host 2**.
   - Ensure the column types match those on the remote table.

#### Step 5: Test the Connection
1. Run a simple `SELECT` query on **Host 1** to test the connection and data retrieval:
   ```sql
   SELECT * FROM foreign_cid_table;
   ```

### Detailed Breakdown of Each Step

#### 1. **Install `postgres_fdw` Extension**
   - This extension allows PostgreSQL to connect to other PostgreSQL databases as if they were local tables.

#### 2. **Create a Foreign Server**
   - This step tells **Host 1** where **Host 2** is located and how to connect to it.

#### 3. **Create a User Mapping**
   - This step provides the credentials **Host 1** will use to authenticate with **Host 2**.

#### 4. **Create a Foreign Table**
   - This table acts as a local reference to the table on **Host 2**. When you query `foreign_cid_table`, **Host 1** will send a request to **Host 2** and retrieve the data.

### Additional Considerations
- **Network Configuration**: Ensure that **Host 2** allows connections from **Host 1**. Update the `pg_hba.conf` file on **Host 2** if needed.
- **Firewall Rules**: Make sure firewalls on both hosts allow traffic on PostgreSQL's port (usually `5432`).
- **User Permissions**: The `remote_user` on **Host 2** must have `CONNECT` privileges on the database and `SELECT` privileges on the tables.

### Example `pg_hba.conf` Entry for Host 2
Add the following line to `pg_hba.conf` on **Host 2** to allow connections from **Host 1**:
```conf
host    host2_db_name    remote_user    host1_ip_address/32    md5
```
- Replace `host2_db_name`, `remote_user`, and `host1_ip_address` with the appropriate values.

### Reload PostgreSQL Configuration
After modifying `pg_hba.conf`, reload the configuration:
```bash
sudo systemctl reload postgresql
```

### Summary
Once these steps are completed, **Host 1** should be able to query **Host 2** as if it were querying a local table. This approach provides seamless integration for distributed data access.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
File location

The pg_hba.conf file, which stands for PostgreSQL Host-Based Authentication configuration file, is typically located in the data directory of your PostgreSQL installation. This file controls the client authentication, specifying who can connect, from where, and what authentication method is used.
Common Locations for pg_hba.conf:

    Linux/Unix Systems: It is usually found in the PostgreSQL data directory, which could be:
        /etc/postgresql/<version>/main/pg_hba.conf (Debian/Ubuntu)
        /var/lib/pgsql/<version>/data/pg_hba.conf (CentOS/RedHat)
        /usr/local/pgsql/data/pg_hba.conf (custom installation)
        
        
        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        
Config changes:

2. Check PostgreSQL Configuration (postgresql.conf):

    Verify that PostgreSQL on Host 2 is configured to accept connections from remote hosts.
    Open postgresql.conf and check the listen_addresses setting:

    bash

sudo nano /path/to/data_directory/postgresql.conf

    Ensure that listen_addresses is set to accept connections from the required IPs:

    conf

listen_addresses = '*'

Alternatively, you can specify only certain IPs, e.g., listen_addresses = 'localhost,172.20.24.155'.

------------------------------------------------------------
After changing the config -- restart
sudo systemctl restart postgresql



-----------------------------------------------------------------------------------------------------